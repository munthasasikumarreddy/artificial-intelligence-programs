def is_valid(assignment, neighbors, region, color):
    for neighbor in neighbors[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(assignment, colors, neighbors):
    # Check if assignment is complete
    if len(assignment) == len(neighbors):
        return assignment

    # Select an unassigned region
    unassigned = [region for region in neighbors if region not in assignment]
    region = unassigned[0]

    for color in colors:
        if is_valid(assignment, neighbors, region, color):
            assignment[region] = color
            result = backtrack(assignment, colors, neighbors)
            if result:
                return result
            del assignment[region]  # backtrack

    return None  # failure

def map_coloring():
    # Define regions and neighbors (example: Australia map)
    neighbors = {
        'WA': ['NT', 'SA'],
        'NT': ['WA', 'SA', 'Q'],
        'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
        'Q': ['NT', 'SA', 'NSW'],
        'NSW': ['Q', 'SA', 'V'],
        'V': ['SA', 'NSW'],
        'T': []
    }

    # Define available colors
    colors = ['Red', 'Green', 'Blue']

    # Start backtracking
    assignment = {}
    result = backtrack(assignment, colors, neighbors)

    if result:
        print("Solution:")
        for region, color in result.items():
            print(f"{region}: {color}")
    else:
        print("No solution found.")

# Run the map coloring
map_coloring()
