from collections import deque

def is_valid(state):
    m_left, c_left, boat, m_right, c_right = state
    # Check negative numbers
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    # Check if missionaries are not outnumbered on either bank
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False
    return True

def get_successors(state):
    m_left, c_left, boat, m_right, c_right = state
    successors = []
    if boat == 'left':
        direction = -1  # move from left to right
        new_boat = 'right'
    else:
        direction = 1  # move from right to left
        new_boat = 'left'

    # Possible moves (missionaries, cannibals)
    moves = [(2,0), (0,2), (1,1), (1,0), (0,1)]

    for m, c in moves:
        new_state = (
            m_left + direction * m,
            c_left + direction * c,
            new_boat,
            m_right - direction * m,
            c_right - direction * c
        )
        if is_valid(new_state):
            successors.append(new_state)
    return successors

def bfs(start_state, goal_state):
    queue = deque()
    queue.append((start_state, [start_state]))
    visited = set()
    visited.add(start_state)

    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path

        for next_state in get_successors(current_state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [next_state]))
    return None

def print_solution(path):
    for step, state in enumerate(path):
        m_left, c_left, boat, m_right, c_right = state
        print(f"Step {step}: Left[{m_left}M, {c_left}C], Boat: {boat}, Right[{m_right}M, {c_right}C]")

# Initial state: 3 missionaries, 3 cannibals on left bank, boat on left
start_state = (3, 3, 'left', 0, 0)
# Goal state: all on right bank
goal_state = (0, 0, 'right', 3, 3)

solution = bfs(start_state, goal_state)

if solution:
    print("Solution found!\n")
    print_solution(solution)
else:
    print("No solution found.")
