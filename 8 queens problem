def is_safe(board, row, col):
    # Check this row on the left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve(board, col):
    # If all queens are placed, return True
    if col >= len(board):
        return True

    # Consider this column and try all rows
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1  # Place queen

            # Recur to place the rest of the queens
            if solve(board, col + 1):
                return True

            # If placing queen in board[i][col] doesn't lead to a solution, backtrack
            board[i][col] = 0

    return False

def print_solution(board):
    for row in board:
        print(" ".join("Q" if x == 1 else "." for x in row))

def eight_queens():
    board = [[0] * 8 for _ in range(8)]  # Initialize empty 8x8 board

    if solve(board, 0):
        print_solution(board)
    else:
        print("No solution exists")

# Call the function to get the solution
eight_queens()
